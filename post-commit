#!/usr/bin/env python3
import sys
import re
import subprocess
from pathlib import Path
# from urllib.parse import quote
# https://help.obsidian.md/Files+and+folders/Accepted+file+formats

print("RUNNING POST-COMMIT...")

# subprocesses to execute git command and return output, vars hold output
# retrieve name of current branch
branch = subprocess.check_output("git rev-parse --abbrev-ref HEAD",
                                 shell=True,
                                 timeout=300)
# retrieve commit message of last commit
msg = subprocess.check_output("git log -1 --pretty=%B",
                              shell=True,
                              timeout=300).strip().decode()

# assign script name to script, assign any additional argumnents to args
script, *args = sys.argv # contains list of CLAs passed to script

# retrieve last argument from args
arg = args.pop() if args else None

if arg == "obsidian":
    arg = None

# if branch argument IS provided
if arg:
    # if current branch !== given argument branch, exit
    if branch != bytes(arg + "\n", "utf8"):
        print("Not on given branch.")
        sys.exit(0)
    print("On given branch", arg)
    
    # find all .md files in current dir and subdirs, assign list to mdfiles
    mdfiles = sorted(Path(".").glob("**/*.md"))
    # mdfiles = sorted(Path("../..").glob("**/*.md"))
    print("All files:")
    print(mdfiles)

# if  branch argument IS NOT provided
else:
    # if branch is not obsidian branch, exit
    if branch != b"obsidian\n":
        print("Branch is not obsidian")
        sys.exit(0)
    print(f"On {branch.decode().strip()}") # decode for cleaner print

    # retrieve list of files changed in last commit
    # first line assigned to header, and rest to filenames
    header, *filenames = subprocess.check_output("git log -1 --stat --oneline --name-only",
                                                 shell=True).splitlines()
    # convert file names to Path objects, assign to allfiles
    allfiles = [Path(f.decode()) for f in filenames]
    # assign file names from allfiles WITH .md extension, to mdfiles
    mdfiles = [p for p in allfiles if p.suffix == ".md" and p.is_file()]
  
    # assign file names from allfiles WITHOUT .md extension, to otherfiles
    otherfiles = [p for p in allfiles if p.suffix != ".md" and p.is_file()]

    # checkout to ob_to_gh
    subprocess.run("git checkout ob_to_gh",
                   shell=True,
                   timeout=300,
                   check=True)

  
    # join file paths in mdfiles and otherfiles into space-separated string, assign to paths
    # manually wrap each path in double quotes to handle spaces when shell=True.
    # note: this is kind of a hack fix, filenames with quotes or other complex shell characters are not accounted for
    paths = " ".join(f'"{str(p)}"' for p in mdfiles + otherfiles)
    
    # DEBUG STATEMENTS (from original script)
    #---- print(f"Current branch: {branch}")
    #---- print(f"Files to checkout: {paths}")
    #---- print(f"MDFiles: {mdfiles}")
    #---- print(f"Other Files: {otherfiles}")

    # checkout files, specified in paths, from obsidian branch to ob_to_gh branch
    # 'paths' string where each path is individually quoted
    if paths: # only runs if there are actual paths to checkout
        subprocess.run(f"git checkout obsidian -- {paths}",
                       shell=True,
                       timeout=300,
                       check=True)
    elif mdfiles or otherfiles: # this case means files were listed but paths string became empty (e.g. error in quoting or file list logic)
        print("Warning: Files were identified, but the 'paths' string for git is unexpectedly empty. Skipping checkout from obsidian.")
    else: # no mdfiles or otherfiles found
        print("No specific files identified in the last commit to checkout from obsidian branch.")


# PAGE LINK CONVERSION
# start message
print("[[file name|link text]] --> [[link text|file-name]]")

# define function to modify Obsidian page links
# m represents argument
def switch_fn_linktext(m):
    # access third captured group from regex match, expecting link text from Obsidian link
    linktext = m.group(3)
    # access second captured group from regex match, expecting file name from Obsidian link
    # replace any spaces in pagename with hyphens
    pagename = m.group(2).replace(" ", "-")
    # form replacement string (first captured group + transformed wikilink)
    sub = f"{m.group(1)}[[{linktext}|{pagename}]]"
    print(sub)
    return sub

# loop to iterate through mdfiles, applying function switch_fn_linktext
for file in mdfiles:
    # store original text
    original_text = file.read_text(encoding='utf-8')
    # apply function using re.sub to perform substitutions
    #                 "([^!])\[\[([^#|[]+?)\|([^#|[]+?)\]\]"
    newtext = re.sub(r"([^!])\[\[([^[]+?)\|([^#|[]+?)\]\]", switch_fn_linktext, original_text)
    if newtext != original_text:
        pass
        file.write_text(newtext, encoding='utf-8')

# HEADER LINK CONVERSION
# start message
print("[[#Some header in the page|some text]] --> [some text](#some-header-in-the-page)")

# define function to modify Obsidian header links
def links_to_header(m):
    linktext = m.group(2)
    pagename = m.group(1).replace(" ", "-").lower()
    # form replacement string
    sub = f"[{linktext}]({pagename})"
    print(m.group(0), sub)
    return sub


for file in mdfiles:
    # store original text
    original_text = file.read_text(encoding='utf-8')
    # original_text = "  [[#Some header in the page|some text]]"
    newtext = re.sub(r"[^!]\[\[(#[^#|[]+?)\|([^#|[]+?)\]\]", links_to_header, original_text)
    if newtext != original_text:
        pass
        file.write_text(newtext, encoding='utf-8')


# IMAGE LINK CONVERSION
# start message
print("![[some image.png]] --> [[some image.png]]")

# define function to modify Obsidian image links
def remove_exclamation_mark(m):
    sub = " " + m.group(2)  # .replace(" ", "-")
    print(sub)
    return sub


for file in mdfiles:
    original_text = file.read_text(encoding='utf-8')
    # original_text = "[![[EGB24-20240705161734646.png]]](https://www.instagram.com/spettsart/?hl=en)" # "x![[some image.png]]"    # "([^[])!(\[\[.+\]\])"
    newtext = re.sub(r"(!)(\[\[.+\]\])", remove_exclamation_mark, original_text)
    if newtext != original_text:
        pass
        file.write_text(newtext, encoding='utf-8')


# for i, file in enumerate(mdfiles):
#     quoted = quote(file.name, safe=" ():")
#     if file.name != quoted:
#         print("  name", file.name)
#         print("rename", quoted)
#         print(file)
#         print()
#         file.rename(quoted)
#         mdfiles[i] = file


# if no branch argument provided
if not arg:

    commands = ("git add --all",
                f"git commit -m \"{msg}\"",  
                "git checkout master",
                "git pull",
                "git merge --strategy-option theirs ob_to_gh",
                "git push origin master",
                "git checkout obsidian",)

    for command in commands:
        subprocess.run(command,
                       shell=True,
                       timeout=300,
                       check=True)
    
    # Update bidirectional sync state to prevent loops
    # This tells the wiki-to-obsidian script that this change came from us
    try:
        import json
        from datetime import datetime
        
        # Get the current master hash after our push
        master_hash = subprocess.check_output("git rev-parse master",
                                            shell=True,
                                            timeout=300).decode().strip()
        
        sync_state = {
            "last_master_hash": master_hash,
            "last_sync_time": datetime.now().isoformat(),
            "sync_source": "obsidian_to_wiki"
        }
        
        with open(".obsidian_sync_state.json", 'w') as f:
            json.dump(sync_state, f, indent=2)
            
        print(f"Updated sync state: {master_hash}")
        
    except Exception as e:
        print(f"Warning: Could not update sync state: {e}")
        # Don't fail the whole script for this